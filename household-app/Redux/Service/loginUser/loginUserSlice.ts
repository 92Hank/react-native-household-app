import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import user from "../user/User";
import { loginSend } from "./loginSend";
import { LogIn } from "./loginUserApi";

export interface CounterState {
  user?: user;
  status: "idle" | "loading" | "failed";
  message?: string;
}

const initialState: CounterState = {
  status: "idle",
};

export const LoginAsync = createAsyncThunk(
  "counter/fetchCount",
  async ({ userName, password }: loginSend) => {
    const response = await LogIn(userName, password);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const loginUserSlice = createSlice({
  name: "loginUser",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(LoginAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(LoginAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.user = action.payload;
      })
      .addCase(LoginAsync.rejected, (state, action) => {
        state.status = "failed";
        state.message = action.error.message;
      });
  },
});

export default loginUserSlice.reducer;
